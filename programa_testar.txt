programa
{
	cadeia cadeia1
	cadeia cadeia2 = "cadeia2"
	const cadeia vetorCadeia1[3] = {"a","a","a"}
	cadeia vetorCadeia2[]       
	caracter caracter1
	caracter caracter2 = 'a'
	logico logico1
	logico logico2 = falso
	const logico vetorLogico[2] = {falso, verdadeiro}
	
	funcao inicio()
	{
		estruturaSe()
		estruturaEscolhaCaso()
		estruturaPara()
		estruturaEnquanto()
		
		entradaESaida()

		funcaoComParametros()

		expressoesAritmeticasELogicas()
	}

	funcao estruturaSe(){
		inteiro i = 0
		se(i < 10) i++ senao i++
		se(i < 10){ i++ } senao { i++ }
		se(i < 10){ i++ } senao se(i < 10) { i++ }
	}

	funcao estruturaEscolhaCaso(){
		caracter a = 'a'
		escolha(a){
			caso 'a':
				escreva("b")
			pare
			caso 'b':
				escreva("b")
			caso 'c':
		}
	}

	funcao estruturaPara(){
		inteiro i = 0
		cadeia cadeia3 = "a"
		para(inteiro j = 0; chamarFuncao(verdadeiro, 2, cadeia3); j++){		
			i++
		}
		para(inteiro j = 0; j < 4; j++){			
			i++
		}
		para(; i < 4;){			
			i++
			pare
			pare
		}
	}

	funcao estruturaEnquanto(){
		inteiro i = 0
		cadeia cadeia3 = "cadeia3"
		cadeia vetorCadeia[1] = {"cadeia3"}
		enquanto(chamarFuncao(1==1, 2, cadeia3)){ i-- }
		faca{ i++	}enquanto(chamarFuncao(1==1, 2, cadeia3))
	}

	funcao logico chamarFuncao(logico valor, inteiro valor2, cadeia &valor3){
		retorne falso
	}

	funcao funcaoComParametros(){
		logico paramLogico = verdadeiro
		inteiro paramInteiro = 0
		real paramReal = 0.0
		cadeia paramCadeiaReferencia = "cadeiaReferencia"
		caracter paramVetorCaracterReferencia[] = {'a','a','a','a'}
		chamarFuncaoComParametros(paramLogico, paramInteiro, paramReal, paramCadeiaReferencia, paramVetorCaracterReferencia)
	}

	
	funcao logico chamarFuncaoComParametros(logico paramLogico, inteiro paramInteiro, real paramReal, cadeia &paramCadeiaRef, caracter &paramVetCaracterRef[]){
		paramLogico = verdadeiro
		paramLogico += verdadeiro
		
		paramInteiro += 1
		paramInteiro ++
		paramInteiro --

		paramReal ++
		paramReal += 0

		paramCadeiaRef += "teste"
		paramCadeiaRef = "teste"
		paramCadeiaRef++

		paramVetCaracterRef[0] = '0'
		
		retorne falso
	}

	funcao entradaESaida(){
		inteiro variavel = 0
		leia(variavel)
		escreva("Variavel escrita")

		inteiro vetor[] = {0}
		leia(vetor[0] == 2)
		escreva(vetor[0])

		logico a = {"a"} == {"b"}

		cadeia vetorCadeia[][] = {{"a","a"},{"a","a"},{"a","a"}}
	}

	funcao expressoesAritmeticasELogicas(){
		inteiro a = 0
		inteiro b = 1

		logico c = a == b + a
		inteiro d = (a + b) + (a + b * a * a / (a + b * a))

		logico comparacaovetores = {"a"} == {"a"}
		inteiro vetInt[] = {2,2,3}
		inteiro resultExpVet = vetInt[0] + vetInt[1] / vetInt[2]
	}
}
